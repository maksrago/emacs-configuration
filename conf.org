#+TITLE: Emacs Configuration File v2.0
#+AUTHOR: Maksymilian Rago
#+EMAIL: null
#+DATE: <2016-08-25 Thu>
#+HTML_HEAD: <link rel="stylesheet" href="http://thomasf.github.io/solarized-css/solarized-dark.css" type="text/css" />

* Master List
** User Details
   Emacs will normally pick this up automatically, but this way I can be
   sure the right information is always present.

   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Maksymilian Rago")
   (setq user-mail-address "")
   #+END_SRC
** Thememing
   Defines a =custom-theme-load-path=. This is useful for thems that
   aren't available within the standard package archives i.e. elpa,
   melpa, or melpa-stable.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'custom-theme-load-path
   "~/.emacs.d/files/")
   #+END_SRC

   Non-manually entered bit of elisp that is generated by Emacs in order
   to 'tell itself' that it is a safe theme to load. This bit is set to
   be changed in the near future.

   #+BEGIN_SRC emacs-lisp
   (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-enabled-themes (quote (tty-dark)))
   '(custom-safe-themes (quote ("7b36f45e5f014ac5d463fa1fe627df6f2094484d31c8aecd77d06b0b23844532" default))))
   #+END_SRC
   
   Changes custom font to Unifont Medium, size 12. Only changes the font
   in GUI mode.
   
   #+BEGIN_SRC emacs-lisp
(set-frame-font "Unifont-12" nil t)
   #+END_SRC
** Package Management
   Simply defines a place for Emacs to look for packages. In other words,
   these websites host several different packages that can be downloaded
   and added to Emacs.

   #+BEGIN_SRC emacs-lisp
   (load "package")
   (package-initialize)
   (add-to-list 'package-archives
   '("gnu" . "http://elpa.gnu.org/packages/") t)
   (add-to-list 'package-archives
   '("melpa" . "http://melpa.milkbox.net/packages/") t)
   
   (setq package-archive-enable-alist '(("melpa" deft magit)))
   #+END_SRC
*** Default Packages
    Complicated at first glance, does a rather simple set of
    things. First of which is taking a set of user input 'values.'  These
    'values' are package names that are hosted on the above
    =package-archives=. Additonally, it checks if the package is
    installed, and/or if it requires/has an update.

    #+BEGIN_SRC emacs-lisp
 (require 'package)
 (defvar packages
   '(autopair
     auto-complete
     auto-complete-c-headers
     beacon
     calfw
     dired-filetype-face
     elfeed
     elfeed-org
     engine-mode
     fill-column-indicator
     flycheck
     goto-chg
     highlight-indentation
     highlight-indent-guides
     ido-vertical-mode
     impatient-mode
     ox-twbs
     peep-dired
     smex
     yasnippet)
"a list of packages to ensure are installed at launch.")
    #+END_SRC
*** Install Default Packages
    Downloads listed packages in 'Default Packages'.

    #+BEGIN_SRC emacs-lisp
(require 'cl)
(defun packages-installed-p ()
  (loop for pkg in packages
        when (not (package-installed-p pkg)) do (return nil)
        finally (return t)))

(unless (packages-installed-p)
  (message "%s" "Refreshing package database...")
  (package-refresh-contents)
  (dolist (pkg packages)
    (when (not (package-installed-p pkg))
      (package-install pkg))))
    #+END_SRC
** Start-up Options
*** Splash Screen
    Skips straight to the scratch buffer and eliminates the default Emacs
    startup screen. It also sets the default to =org-mode= rather than
    =fundamental-mode=.

    #+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil)
    #+END_SRC
*** Scroll bar, Tool bar, Menu bar
    Disables the menu bar, scroll bar, and tool bar.

    #+BEGIN_SRC emacs-lisp
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
 (tool-bar-mode -1)
    #+END_SRC
*** Display Time
    Displays the current time on the mode line.

    #+BEGIN_SRC emacs-lisp
(display-time-mode t)
    #+END_SRC
*** Highlight Active Line
    =hl-line-mode= highlights the current line and makes keeping track of
    your location much easier.

    #+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
(set-face-background hl-line-face "gray13")
    #+END_SRC
*** Marking/Deleting Text
    The following allows a more standard text editor text deletion method,
    In other words whenever a mark is made and text typed it deletes the
    selected text. The final line allows Emacs to work with the operating
    system clipboard, in other words, the keyring is no longer the only
    way that Emacs grabs copied data.

    #+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
(transient-mark-mode t)
(setq x-select-enable-clipboard t)
    #+END_SRC
*** Backup Files
    File backup files

    #+BEGIN_SRC emacs-lisp
      ;; (setq make-backup-files t
      ;; backup-by-copying t
      ;; version-control t
      ;; auto-save-default t
      ;; auto-save-timeout 20
      ;; auto-save-interval 200
      ;; )

      ;; (setq backup-directory-alist '(("." . "~/ownCloud/Files/Backups")))
      ;; if you change your mind activate the command below to have no backup files
      (setq make-backup-files nil)
    #+END_SRC
*** Warning Level
    Sets the =warning-minimum-level= to emergency levels to prevent
    annoying small errors.

    #+BEGIN_SRC emacs-lisp
    ;;(setq warning-minimum-level :emergency)
    #+END_SRC
*** Yes and No
    Prevents having to type 'yes' or 'no' and instead allows you to type
    'y' or 'n'.

    #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Display Settings
    Puts empty line markers into the left hand side when reaching the
    bottom of a page.

    #+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines t)
(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines))
    #+END_SRC
**** Line-number
     Display line number on the right hand side globally.

     #+BEGIN_SRC emacs-lisp
(global-linum-mode t)
     #+END_SRC
*** Indentation
    This re-indents, untabifies, and cleans up whitespace. It is stolen
    directly from the emacs-starter-kit.
    #+BEGIN_SRC emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a
  buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)

(setq-default show-trailing-whitespace t)
    #+END_SRC
** Utilities
*** Smex
    =smex= provides history and searching on top of =M-x=. Additionally,
    this initlializes =smex= and rebinds it to =M-x=.

    #+BEGIN_SRC emacs-lisp
(require 'smex)

(smex-initialize)

(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
    #+END_SRC
**** Restoring old M-x functions
     Adds a "-" after pressing space like regular M-x

     #+BEGIN_SRC emacs-lisp
(defadvice smex (around space-inserts-hyphen activate compile)
        (let ((ido-cannot-complete-command
               `(lambda ()
                  (interactive)
                  (if (string= " " (this-command-keys))
                      (insert ?-)
                    (funcall ,ido-cannot-complete-command)))))
          ad-do-it))
     #+END_SRC

*** Ido
    Ido provides a more aesthetically pleasing way of navigating the
    filesystem.This enables =ido-mode= as well as =ido-vertical-mode=.

    #+BEGIN_SRC emacs-lisp
(require 'ido)
(require 'ido-vertical-mode)

(ido-mode 1)
(ido-vertical-mode 1)
    #+END_SRC
*** Column number mode
    Turns on =column-number-mode= which is listed next to the line number
    in the mini buffer.

    #+BEGIN_SRC emacs-lisp
    (setq column-number-mode t)
    #+END_SRC
*** Temporary file prevention/deletion
    Prevents/deletes temporary files. This makes them go away!

    #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
    #+END_SRC
*** auto-fill-mode
    Similar to =refill-mode=, but auto wraps text automatically as you
    write.
    
    #+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
    #+END_SRC
*** autopair-mode
    This makes sure that =()=, =[]=, ={}=, to be automatically closed as
    soon as they are typed.

    #+BEGIN_SRC emacs-lisp
    (require 'autopair)
    (autopair-global-mode 1)
    #+END_SRC
*** show-paren-mode
    Display corresponding parenthesis.
    #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
    #+END_SRC
*** auto-complete
    Turns on auto complete.

    #+BEGIN_SRC emacs-lisp
    (require 'auto-complete)
    (require 'auto-complete-config)
    (ac-config-default)
    (global-auto-complete-mode t)
    #+END_SRC
*** flycheck-mode
    =flycheck-mode= is a syntax highlighter for Emacs, and regularly
    checks over code.

    #+BEGIN_SRC emacs-lisp
    (require 'flycheck)
    (global-flycheck-mode)
    #+END_SRC
*** flyspell
    This is the built-in Emacs spell checker.

    #+BEGIN_SRC emacs-lisp
    (setq flyspell-issue-welcome-flag nil)
    (if (eq system-type 'darwin)
    (setq-default ispell-program-name "/usr/local/bin/aspell")
    (setq-default ispell-program-name "/usr/bin/aspell"))
    (setq-default ispell-list-command "list")
    #+END_SRC
*** calfw
    =calfw= is a calander framework for Emacs which displays an ASCII
    calander in an Emacs buffer. It can be matched with org-mode to link
    =TODO= items and more. This changes the start of the week to Sunday
    rather than Monday (0 = Sunday, 1 = Monday).

    #+BEGIN_SRC emacs-lisp
    (require 'calfw)
    (require 'calfw-org)

    (setq calendar-week-start-day 0)

    (global-set-key (kbd "<f12>") 'cfw:open-org-calendar)
    #+END_SRC
*** Org-mode
    Just initialize =org-mode= and different parts of it to make different
    parts of copying source blocks possible. In other words it =init.el=
    or =.emacs= possible to be written in an =.org= file, such as this
    one.

    #+BEGIN_SRC emacs-lisp
    (require 'org-install)
    (require 'ob)
    (require 'ob-tangle)
    #+END_SRC
**** Agenda Directories
     Defines where org-mode should look for agenda files. *Note:* This is
     likely required for calfw integration to properly
     work. *WARNING*: All documents listed as agenda files will be
     synced with =mobile-org-push= and with =calfw=.

     #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (list "~/Documents/org-files/todo.org"
     "~/Documents/org-files/budget.org"))
     #+END_SRC
**** org-mobile-directory
     Defines the =org-mobile-directory= and pulls/pushes changes.

     #+BEGIN_SRC emacs-lisp
     (setq org-directory "~/Documents/org-files/")
     (setq org-mobile-directory "~/ownCloud/")
     (setq org-mobile-inbox-for-pull "~/Documents/org-files/todo.org")
     #+END_SRC
**** Calander/Diary Integration
     In order to include entries from the Emacs diary into Org mode's
     agenda, you only need to customize the variable. *Note:* Pretty sure
     this is required in order for calfw to be able to read the defined
     agenda directory.

     #+BEGIN_SRC emacs-lisp
     (setq org-agenda-include-diary t)
     #+END_SRC
**** ox-twbs
     Exports =org-mode= docs as HTML compatitible with the Twitter
     Boostrap. It gives =org-mode= docs a simple, clean, and modern look.

     #+BEGIN_SRC emacs-lisp
     (require 'ox-twbs)
     #+END_SRC
**** Additional org-mode-keywords
     This adds additional tags to =org-mode= to increase
     functionality. =nil= don't add anything, just change the
     keyword. =!=, =time= add a time stamp to the task. =@=, =note= prompt for a note
     and ad it with template =org-log-note-headings=.

     #+BEGIN_SRC emacs-lisp
     (setq org-log-done t
     org-todo-keywords '((sequence "TODO(t)" "STARTED(s!)" "WAITING(w)" "QUIZ(q)" "TEST(t)" "PAPER(p)" "HOMEWORK(h)" "|" "DONE(d!)" "CANCELED(c!)")))

     (setq org-todo-keyword-faces
     '(
     ("TODO" . (:foreground "green" :weight bold))
     ("STARTED" . (:foreground "yellow" :weight bold))
     ("WAITING" . (:foreground "gray" :weight bold))
     ("QUIZ" . (:foreground "orange" :weight bold))
     ("TEST" . (:foreground "orange" :weight bold))
     ("PAPER" . (:foreground "orange" :weight bold))
     ("HOMEWORK" . (:foreground "orange" :weight bold))
     ("DONE" . (:foreground "red" :weight bold))
     ("CANCELED" . (:foreground "red" :weight bold))
     ))
     #+END_SRC
**** Archive Keyword Events
     This will archive all specificed files with a certain tag to be put
     into one large file. In this case all =DONE= events will be placed
     into the file location specified.

     #+BEGIN_SRC emacs-lisp
     ;; (defun my-org-archive-done-tasks ()
     ;;   (interactive)
     ;;   (org-map-entries 'org-archive-subtree "/DONE" 'file))
     #+END_SRC
*** highlight-indentation
    Simply highlights the amount of times indentation appears within a
    file.

    #+BEGIN_SRC emacs-lisp
    (require 'highlight-indentation)
    #+END_SRC
*** fill-column-indicator
    This gives a visual marker of where a defined column ends, and where
    text is wrapped.

    #+BEGIN_SRC emacs-lisp
    (require 'fill-column-indicator)
    #+END_SRC
*** beacon
    Produces an animation whenever tabbing between windows or buffers,
    also when scrolling down a page it shows the cursor position.

    #+BEGIN_SRC emacs-lisp
    (require 'beacon)
    (beacon-mode 1)
    #+END_SRC
*** auto-complete-c-headers
    Allows correction and detection of headers in C/C++. The following
    initializes auto-complete-c-headers and defines a directory for where
    they are located. And the last two lines tell Emacs to enable these
    for various modes.

    #+BEGIN_SRC emacs-lisp
    (defun my:ac-c-header-init ()
    (require 'auto-complete-c-headers)
    (add-to-list 'ac-sources 'ac-source-c-headers)
    (add-to-list 'achead:include-directories '" /usr/lib/gcc/x86_64-linux-gnu/4.8/include"))
    
    (add-hook 'c++-mode-hook 'my:ac-c-header-init)
    (add-hook 'c-mode-hook 'my:ac-c-header-init)
    #+END_SRC
*** elfeed
    =elfeed= is a great package that implements a customizible RSS feed
    into Emacs.

    #+BEGIN_SRC emacs-lisp
    (require 'elfeed)
    #+END_SRC
**** Time Format
     This sets the search format for =elfeed= to display as month/day/year
     hour/min/sec AM/PM.

     #+BEGIN_SRC emacs-lisp
     (defun elfeed-search-format-date (date)
     (format-time-string "%m-%d-%Y %I:%M:%S%p" (seconds-to-time date)))
     #+END_SRC
**** Default Search Filter
     Sets the default filter to be anything that has been posted 3 days ago
     and that is unread.

     #+BEGIN_SRC emacs-lisp
     (setq-default elfeed-search-filter "@3-days-ago +unread")
     #+END_SRC
**** elfeed Update Timer
     Makes =elfeed= update every 180 seconds or 3 minutes.

     #+BEGIN_SRC emacs-lisp
     (run-with-timer 0 180 'elfeed-update)
     #+END_SRC
**** RSS Timeout
     If =elfeed= cannot connect to the listed set of RSS sources then it
     will timeout after 10 seconds.

     #+BEGIN_SRC emacs-lisp
     (setf url-queue-timeout 10)
     #+END_SRC
**** elfeed-org
     =elfeed-org= allows listing all rss sources into an org file. The
     second hook initializes elfeed-org.

     #+BEGIN_SRC emacs-lis
     (require 'elfeed-org)
     (elfeed-org)
     #+END_SRC
***** RSS File Directory
      Defines where =elfeed-org= should look for list of RSS sources.

      #+BEGIN_SRC emacs-lisp
      (setq rmh-elfeed-org-files (list "~/.emacs.d/rss_feed.org"))
      #+END_SRC
**** elfeed Tag Bindings
***** All - Recently Updated
      This binds binds "`" (right above Tab) to display all content that was
      posted an hour ago, and is =unread=.

      #+BEGIN_SRC emacs-lisp
 (defun elfeed-default()
   "Shows all content posted an hour ago"
   (interactive)
   (setq elfeed-search-filter "@1-hour-ago +unread")
   (elfeed-search-update :force))
 (define-key elfeed-search-mode-map (kbd "`") 'elfeed-default)
      #+END_SRC
***** YouTube
****** YouTube - Uploaded Today (1 day ago)
       This binds "1" to display all YouTube content that was posted 1 day
       ago, and is =unread=.

       #+BEGIN_SRC emacs-lisp
  (defun elfeed-yt-today()
    "Shows all YouTube videos that were uploaded today."
    (interactive)
    (setq elfeed-search-filter "@1-day-ago +yt +unread")
    (elfeed-search-update :force))
  (define-key elfeed-search-mode-map (kbd "1") 'elfeed-yt-today)
       #+END_SRC
****** YouTube - Uploaded Recently (3 days ago)
       This binds "C-1" to display all YouTube content that was posted 3 days
       ago, and is =unread=.

       #+BEGIN_SRC emacs-lisp
  (defun elfeed-yt-recent ()
    "Shows recently uploaded YouTube videos."
    (interactive)
    (setq elfeed-search-filter "@3-day-ago +yt +unread")
    (elfeed-search-update :force))
  (define-key elfeed-search-mode-map (kbd "C-1") 'elfeed-yt-recent)
       #+END_SRC
****** Youtube - Uploaded Latterly (3 months ago)
       This binds "S-1" to display all YouTube content that was posted 3
       months ago.
       #+BEGIN_SRC emacs-lisp
  (defun elfeed-yt ()
    "Shows uploaded YouTube videos."
    (interactive)
    (setq elfeed-search-filter "@3-months-ago +yt")
    (elfeed-search-update :force))
  (define-key elfeed-search-mode-map (kbd "!") 'elfeed-yt)
       #+END_SRC
***** News
****** stallman.org
******* stallman.org - Posted Today (1 day ago)
        This binds "2" to display all News content that was posted 1 day ago,
        and is =unread=.

        #+BEGIN_SRC emacs-lisp
   (defun elfeed-news-today()
     "Shows recent news articles."
     (interactive)
     (setq elfeed-search-filter "@1-day-ago +news +unread")
     (elfeed-search-update :force))
   (define-key elfeed-search-mode-map (kbd "2") 'elfeed-news-today)
        #+END_SRC
******* stallman.org - Posted Recently (3 days ago)
        This binds "C-2" to display all News content that was posted 3 days ago,
        and is =unread=.

        #+BEGIN_SRC emacs-lisp
   (defun elfeed-news-recent()
     "Shows recent news articles."
     (interactive)
     (setq elfeed-search-filter "@3-days-ago +news +unread")
     (elfeed-search-update :force))
   (define-key elfeed-search-mode-map (kbd "C-2") 'elfeed-news-recent)
        #+END_SRC
******* stallman.org - Posted Latterly (3 months ago)
        This binds "S-2" to display all News content that was posted 3 months
        ago.
        #+BEGIN_SRC emacs-lisp
   (defun elfeed-news()
     "Shows all news articles."
     (interactive)
     (setq elfeed-search-filter "@3-months-ago +news")
     (elfeed-search-update :force))
   (define-key elfeed-search-mode-map (kbd "@") 'elfeed-news)
        #+END_SRC
***** Private
****** Private - Posted Today (1 day ago)
       This binds "3" to display all Private content that was posted 1 day ago,
       and is =unread=.

       #+BEGIN_SRC emacs-lisp
  (defun elfeed-p-today()
    "Shows recent lewd content"
    (interactive)
    (setq elfeed-search-filter "@1-day-ago +p +unread")
    (elfeed-search-update :force))
  (define-key elfeed-search-mode-map (kbd "3") 'elfeed-p-today)
       #+END_SRC
****** Private - Posted Recently (3 days ago)
       This binds "C-3" to display all Private content that was posted 3 days ago,
       and is =unread=.

       #+BEGIN_SRC emacs-lisp
  (defun elfeed-p-recent()
    "Shows recent lewd content"
    (interactive)
    (setq elfeed-search-filter "@3-days-ago +p +unread")
    (elfeed-search-update :force))
  (define-key elfeed-search-mode-map (kbd "C-3") 'elfeed-p-recent)
       #+END_SRC
****** Private - Posted Latterly (3 months ago)
       This binds "S-3" to display all Private content that was posted 3
       months ago.

       #+BEGIN_SRC emacs-lisp
  (defun elfeed-p()
    "Shows all lewd content."
    (interactive)
    (setq elfeed-search-filter "@3-months-ago +p")
    (elfeed-search-update :force))
  (define-key elfeed-search-mode-map (kbd "#") 'elfeed-p)
       #+END_SRC
*** impatient-mode
    =impatient-mode= grants Emacs yet another server functionality. In
    this case =impatient-mode= is useful for making websites because it
    gives live updates to the browser of changes. *Note:* In order to
    activate =impatient-mode=, =httpd-start= must be activated, or
    =httpd-stop= to terminate. =impatient-mode= must be enabled within the
    specific buffer as well. To access the buffer in the browser navigate
    to: http://<localhost/device ip>:8080/imp/.

    #+BEGIN_SRC emacs-lisp
(require 'impatient-mode)
    #+END_SRC
*** yasnippet
    Don't really know what this does right now.
    #+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
    #+END_SRC
*** engine-mode
    =engine-mode= is a global minor mode for Emacs. It enables you to
    easily define search engines, bind them to keybindings, and query them
    from the comfort of your editor.

    #+BEGIN_SRC emacs-lisp
(require 'engine-mode)
(engine-mode t)
    #+END_SRC
**** Search Engines
     These are the various search engines that can be used by =engine-mode=
     and their respective hotkeys.
***** StartPage
      #+BEGIN_SRC emacs-lisp
 (defengine startpage
   "https://www.startpage.com/do/dsearch?query=%s"
   :keybinding "s")
      #+END_SRC
***** YouTube
      #+BEGIN_SRC emacs-lisp
 (defengine youtube
   "https://www.youtube.com/results?search_query=%s"
   :keybinding "y")
      #+END_SRC
***** DuckDuckGo
      #+BEGIN_SRC emacs-lisp
 (defengine duckduckgo
   "https://duckduckgo.com/?q=%s"
   :keybinding "d")
      #+END_SRC
      # *** External Search Engine Functions
      # **** StartPage Search
      # The following function allows typing a search and having it open
      # externally to the default browser.

      # #+BEGIN_SRC emacs-lisp
      #  (defun startpage-search ()
      #    "Search Startpage with a query or region if any."
      #    (interactive)
      #    (browse-url
      #     (concat
      #      "https://startpage.com/do/search?language=english&cat=web&query="
      #      (url-hexify-string (if mark-active
      #                             (buffer-substring (region-beginning) (region-end))
      #                           (read-string "Search Startpage: "))))))
      # #+END_SRC
      # **** YouTube Search
      # The following function allows typing a search and having it open
      # externally to the default browser.

      # #+BEGIN_SRC emacs-lisp
      #  (defun youtube-search ()
      #    "Search YouTube with a query or region if any."
      #    (interactive)
      #    (browse-url
      #     (concat
      #      "https://www.youtube.com/results?search_query="
      #      (url-hexify-string (if mark-active
      #                             (buffer-substring (region-beginning) (region-end))
      #                           (read-string "Search YouTube: "))))))
      # #+END_SRC
      # **** DuckDuckGo Search
      # The following function allows typing a search and having it open
      # externally to the default browser.

      # #+BEGIN_SRC emacs-lisp
      #  (defun duck-search ()
      #    "Search DuckDuckGo with a query or region if any."
      #    (interactive)
      #    (browse-url
      #     (concat
      #      "https://duckduckgo.com/?q="
      #      (url-hexify-string (if mark-active
      #                             (buffer-substring (region-beginning) (region-end))
      #                           (read-string "Search DuckDuckGo: "))))))
      # #+END_SRC
*** highlight-indent-guides
    Gives a nice line display to show relational brackets.

    #+BEGIN_SRC emacs-lisp
(require 'highlight-indent-guides)
(setq highlight-indent-guides-method 'character)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    #+END_SRC
*** Livestreamer to VLC
    The following function takes a link that is supported by Livestreamer
    (YouTube/Twitch) and pipes it through an emulated terminal. The
    terminal appears as a hidden buffer and kills itself once the
    Livestreamer session is over.

    #+BEGIN_SRC emacs-lisp
(defcustom livestreamer-size "best"
  "The stream size to request from Livestreamer."
  :type 'string)

(defcustom livestreamer-opts nil
  "Additional options to pass to Livestreamer."
  :type 'string)

(defvar-local livestreamer-process nil
  "The Livestreamer process for a `livestreamer-mode' buffer.")

(defvar-local livestreamer-url nil
  "The current stream URL for a `livestreamer-mode' buffer.")

(defvar-local livestreamer-current-size nil
  "The current stream size for a `livestreamer-mode' buffer.")

(defun livestreamer-kill-buffer ()
  "Safely interrupt running stream players under Livestreamer
before killing the buffer."
  (interactive)
  (when (eq major-mode 'livestreamer-mode)
    (if (equal 'run (process-status livestreamer-process))
        (interrupt-process livestreamer-process)
      (kill-buffer))))

(defun livestreamer-reopen-stream ()
  "Re-open the previous stream for this buffer using
Livestreamer."
  (interactive)
  (when (eq major-mode 'livestreamer-mode)
    (let ((inhibit-read-only t))
      (goto-char (point-max))
      (if (equal 'run (process-status livestreamer-process))
          ;; Don't try and re-open if the stream ain't closed!
          (insert (propertize
                   "# Cannot re-open stream: a stream is still open.\n"
                   'face 'font-lock-comment-face))
        (insert (propertize "# Re-opening stream...\n"
                            'face 'font-lock-comment-face))
        (livestreamer-open livestreamer-url nil nil 'no-erase)))))

(defvar livestreamer-mode-map
  (let ((map (make-sparse-keymap)))
    (prog1 map
      (suppress-keymap map)
      (define-key map "q" 'livestreamer-kill-buffer)
      (define-key map "r" 'livestreamer-reopen-stream)
      (define-key map "n" 'next-line)
      (define-key map "p" 'previous-line)))
  "Keymap for `livestreamer-mode'.")

(define-derived-mode livestreamer-mode fundamental-mode "livestreamer"
  "A major mode for Livestreamer output."
  :group 'helm-twitch
  (setq truncate-lines t
        buffer-read-only t)
  (buffer-disable-undo)
  (hl-line-mode))

(defun livestreamer--filter (proc output)
  "Filter OUTPUT from Livestreamer process PROC for display in
the buffer."
  (let ((buff (process-buffer proc)))
    (when (not (null buff))
      (with-current-buffer buff
        (let ((inhibit-read-only t))
          (goto-char (point-max))
          (insert output))))))

(defun livestreamer--sentinel (proc event)
  "Respond when Livestreamer process PROC receives EVENT."
  (let ((buff (process-buffer proc)))
    (when (not (null buff))
      (with-current-buffer buff
        (let ((inhibit-read-only t))
          (goto-char (point-max))
          (if (equal event "finished\n")
      (livestreamer-kill-buffer)
            (insert (propertize (format "# Livestreamer process had event: %s\n"
                                        event)
                                'face 'font-lock-comment-face))))))))

(defun livestreamer-open (url &optional size opts no-erase)
  (interactive "sURL: ")
  "Opens the stream at URL using the Livestreamer program."
  (let* ((cmd  (executable-find "livestreamer"))
         (size (or size livestreamer-size))
         (opts (or opts livestreamer-opts ""))
         (cmd  (when cmd (format "%s %s %s %s" cmd opts url size)))
         (buff (when cmd (get-buffer-create "*livestreamer*"))))
    (if cmd
        (with-current-buffer buff
          (bury-buffer buff)
          (unless (eq major-mode 'livestreamer-mode)
            (livestreamer-mode))
          (let ((inhibit-read-only t))
            (when (not no-erase)
              (erase-buffer)
              (insert (propertize (format "# Livestreamer: %s\n" url)
                                  'face 'font-lock-comment-face)))
            (let ((proc (start-process-shell-command cmd buff cmd)))
              (setq livestreamer-process proc
                    livestreamer-url url
                    livestreamer-current-size size)
          (set-process-filter proc 'livestreamer--filter)
              (set-process-sentinel proc 'livestreamer--sentinel))
          nil))
      (message "Could not locate the livestreamer program."))))
    #+END_SRC
*** Miscellaneous Export Settings
    Removes the validate part from bottom of exported HTML file.

    #+BEGIN_SRC emacs-lisp
      (setq org-html-validation-link nil)
    #+END_SRC
